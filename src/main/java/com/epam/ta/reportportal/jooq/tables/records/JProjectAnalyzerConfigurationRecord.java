/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables.records;

import com.epam.ta.reportportal.jooq.tables.JProjectAnalyzerConfiguration;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JProjectAnalyzerConfigurationRecord extends UpdatableRecordImpl<JProjectAnalyzerConfigurationRecord> implements Record8<Long, Integer, Integer, Integer, Integer, Boolean, Boolean, String> {

    private static final long serialVersionUID = 799383430;

    /**
     * Setter for <code>public.project_analyzer_configuration.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.project_analyzer_configuration.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.project_analyzer_configuration.min_doc_freq</code>.
     */
    public void setMinDocFreq(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.project_analyzer_configuration.min_doc_freq</code>.
     */
    public Integer getMinDocFreq() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.project_analyzer_configuration.min_term_freq</code>.
     */
    public void setMinTermFreq(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.project_analyzer_configuration.min_term_freq</code>.
     */
    public Integer getMinTermFreq() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.project_analyzer_configuration.min_should_match</code>.
     */
    public void setMinShouldMatch(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.project_analyzer_configuration.min_should_match</code>.
     */
    public Integer getMinShouldMatch() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>public.project_analyzer_configuration.number_of_log_lines</code>.
     */
    public void setNumberOfLogLines(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.project_analyzer_configuration.number_of_log_lines</code>.
     */
    public Integer getNumberOfLogLines() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>public.project_analyzer_configuration.indexing_running</code>.
     */
    public void setIndexingRunning(Boolean value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.project_analyzer_configuration.indexing_running</code>.
     */
    public Boolean getIndexingRunning() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>public.project_analyzer_configuration.enabled</code>.
     */
    public void setEnabled(Boolean value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.project_analyzer_configuration.enabled</code>.
     */
    public Boolean getEnabled() {
        return (Boolean) get(6);
    }

    /**
     * Setter for <code>public.project_analyzer_configuration.analyzermode</code>.
     */
    public void setAnalyzermode(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.project_analyzer_configuration.analyzermode</code>.
     */
    public String getAnalyzermode() {
        return (String) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row8<Long, Integer, Integer, Integer, Integer, Boolean, Boolean, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row8<Long, Integer, Integer, Integer, Integer, Boolean, Boolean, String> valuesRow() {
        return (Row8) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field1() {
        return JProjectAnalyzerConfiguration.PROJECT_ANALYZER_CONFIGURATION.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return JProjectAnalyzerConfiguration.PROJECT_ANALYZER_CONFIGURATION.MIN_DOC_FREQ;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return JProjectAnalyzerConfiguration.PROJECT_ANALYZER_CONFIGURATION.MIN_TERM_FREQ;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field4() {
        return JProjectAnalyzerConfiguration.PROJECT_ANALYZER_CONFIGURATION.MIN_SHOULD_MATCH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field5() {
        return JProjectAnalyzerConfiguration.PROJECT_ANALYZER_CONFIGURATION.NUMBER_OF_LOG_LINES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field6() {
        return JProjectAnalyzerConfiguration.PROJECT_ANALYZER_CONFIGURATION.INDEXING_RUNNING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field7() {
        return JProjectAnalyzerConfiguration.PROJECT_ANALYZER_CONFIGURATION.ENABLED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field8() {
        return JProjectAnalyzerConfiguration.PROJECT_ANALYZER_CONFIGURATION.ANALYZERMODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component2() {
        return getMinDocFreq();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component3() {
        return getMinTermFreq();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component4() {
        return getMinShouldMatch();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component5() {
        return getNumberOfLogLines();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean component6() {
        return getIndexingRunning();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean component7() {
        return getEnabled();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component8() {
        return getAnalyzermode();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getMinDocFreq();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getMinTermFreq();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value4() {
        return getMinShouldMatch();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value5() {
        return getNumberOfLogLines();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value6() {
        return getIndexingRunning();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value7() {
        return getEnabled();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value8() {
        return getAnalyzermode();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JProjectAnalyzerConfigurationRecord value1(Long value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JProjectAnalyzerConfigurationRecord value2(Integer value) {
        setMinDocFreq(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JProjectAnalyzerConfigurationRecord value3(Integer value) {
        setMinTermFreq(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JProjectAnalyzerConfigurationRecord value4(Integer value) {
        setMinShouldMatch(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JProjectAnalyzerConfigurationRecord value5(Integer value) {
        setNumberOfLogLines(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JProjectAnalyzerConfigurationRecord value6(Boolean value) {
        setIndexingRunning(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JProjectAnalyzerConfigurationRecord value7(Boolean value) {
        setEnabled(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JProjectAnalyzerConfigurationRecord value8(String value) {
        setAnalyzermode(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JProjectAnalyzerConfigurationRecord values(Long value1, Integer value2, Integer value3, Integer value4, Integer value5, Boolean value6, Boolean value7, String value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached JProjectAnalyzerConfigurationRecord
     */
    public JProjectAnalyzerConfigurationRecord() {
        super(JProjectAnalyzerConfiguration.PROJECT_ANALYZER_CONFIGURATION);
    }

    /**
     * Create a detached, initialised JProjectAnalyzerConfigurationRecord
     */
    public JProjectAnalyzerConfigurationRecord(Long id, Integer minDocFreq, Integer minTermFreq, Integer minShouldMatch, Integer numberOfLogLines, Boolean indexingRunning, Boolean enabled, String analyzermode) {
        super(JProjectAnalyzerConfiguration.PROJECT_ANALYZER_CONFIGURATION);

        set(0, id);
        set(1, minDocFreq);
        set(2, minTermFreq);
        set(3, minShouldMatch);
        set(4, numberOfLogLines);
        set(5, indexingRunning);
        set(6, enabled);
        set(7, analyzermode);
    }
}
